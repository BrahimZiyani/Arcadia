<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Entity__Animal__CLASSMETADATA__' => 0,
'App__Entity__CompteRendu__CLASSMETADATA__' => 1,
'App__Entity__Habitat__CLASSMETADATA__' => 2,
'App__Entity__Avis__CLASSMETADATA__' => 3,
'App__Entity__Service__CLASSMETADATA__' => 4,
'App__Entity__User__CLASSMETADATA__' => 5,
'App__Entity__AnimalFeeding__CLASSMETADATA__' => 6,
'App__Entity__Schedule__CLASSMETADATA__' => 7,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Animal',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AnimalRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'race' => $o[3],
                        'images' => $o[4],
                        'etatDeSante' => $o[5],
                        'alimentation' => $o[6],
                        'visites' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'race' => 'race',
                        'images' => 'images',
                        'etat_de_sante' => 'etatDeSante',
                        'alimentation' => 'alimentation',
                        'visites' => 'visites',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'race' => 'race',
                        'images' => 'images',
                        'etatDeSante' => 'etat_de_sante',
                        'alimentation' => 'alimentation',
                        'visites' => 'visites',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'animal',
                    ],
                ],
                'associationMappings' => [
                    [
                        'habitat' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[10],
                ],
                'name' => [
                    'App\\Entity\\Animal',
                    9 => 'habitat_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'json',
                    'text',
                    'text',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'race',
                    'images',
                    'etatDeSante',
                    'alimentation',
                    'visites',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'race',
                    'images',
                    'etat_de_sante',
                    'alimentation',
                    'visites',
                ],
                'length' => [
                    2 => 255,
                    255,
                ],
                'options' => [
                    7 => [
                        'default' => 0,
                    ],
                ],
                'fetch' => [
                    8 => 2,
                ],
                'sourceEntity' => [
                    8 => 'App\\Entity\\Animal',
                ],
                'sourceToTargetKeyColumns' => [
                    8 => [
                        'habitat_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    8 => [
                        'id' => 'habitat_id',
                    ],
                ],
                'joinColumns' => [
                    8 => [
                        $o[9],
                    ],
                ],
                'joinColumnFieldNames' => [
                    8 => [
                        'habitat_id' => 'habitat_id',
                    ],
                ],
                'unique' => [
                    9 => false,
                ],
                'nullable' => [
                    9 => false,
                ],
                'referencedColumnName' => [
                    9 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    8 => 'habitat',
                ],
                'targetEntity' => [
                    8 => 'App\\Entity\\Habitat',
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\CompteRendu',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CompteRenduRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                        'etat' => $o[3],
                        'details' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'etat' => 'etat',
                        'details' => 'details',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'etat' => 'etat',
                        'details' => 'details',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'compte_rendu',
                    ],
                ],
                'associationMappings' => [
                    [
                        'animal' => $o[5],
                        'utilisateur' => $o[7],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\CompteRendu',
                    6 => 'animal_id',
                    8 => 'utilisateur_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'text',
                    'text',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                    'etat',
                    'details',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                    'etat',
                    'details',
                ],
                'nullable' => [
                    4 => true,
                    6 => false,
                    8 => false,
                ],
                'fetch' => [
                    5 => 2,
                    7 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\CompteRendu',
                    7 => 'App\\Entity\\CompteRendu',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'animal_id' => 'id',
                    ],
                    7 => [
                        'utilisateur_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'animal_id',
                    ],
                    7 => [
                        'id' => 'utilisateur_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                    7 => [
                        $o[8],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'animal_id' => 'animal_id',
                    ],
                    7 => [
                        'utilisateur_id' => 'utilisateur_id',
                    ],
                ],
                'unique' => [
                    6 => false,
                    8 => false,
                ],
                'referencedColumnName' => [
                    6 => 'id',
                    8 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'animal',
                    7 => 'utilisateur',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Animal',
                    7 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Habitat',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'description' => $o[3],
                        'images' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                        'images' => 'images',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                        'images' => 'images',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'habitat',
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\Habitat',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'json',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'description',
                    'images',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'description',
                    'images',
                ],
                'length' => [
                    2 => 255,
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Avis',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AvisRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'prenom' => $o[2],
                        'dateVisite' => $o[3],
                        'contenu' => $o[4],
                        'valide' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'prenom' => 'prenom',
                        'date_visite' => 'dateVisite',
                        'contenu' => 'contenu',
                        'valide' => 'valide',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'prenom' => 'prenom',
                        'dateVisite' => 'date_visite',
                        'contenu' => 'contenu',
                        'valide' => 'valide',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'avis',
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\Avis',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'date',
                    'text',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'prenom',
                    'dateVisite',
                    'contenu',
                    'valide',
                ],
                'columnName' => [
                    1 => 'id',
                    'prenom',
                    'date_visite',
                    'contenu',
                    'valide',
                ],
                'length' => [
                    2 => 255,
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Service',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ServiceRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'description' => $o[3],
                        'images' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                        'images' => 'images',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                        'images' => 'images',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'service',
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\Service',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'json',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'description',
                    'images',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'description',
                    'images',
                ],
                'length' => [
                    2 => 255,
                ],
            ],
        ],
        $o[0],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\User',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\UserRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'email' => $o[2],
                        'nom' => $o[3],
                        'prenom' => $o[4],
                        'roles' => $o[5],
                        'password' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'nom' => 'nom',
                        'prenom' => 'prenom',
                        'roles' => 'roles',
                        'password' => 'password',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'nom' => 'nom',
                        'prenom' => 'prenom',
                        'roles' => 'roles',
                        'password' => 'password',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'users',
                        'uniqueConstraints' => [
                            'UNIQ_IDENTIFIER_EMAIL' => [
                                'fields' => [
                                    'email',
                                ],
                            ],
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\User',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'json',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'email',
                    'nom',
                    'prenom',
                    'roles',
                    'password',
                ],
                'columnName' => [
                    1 => 'id',
                    'email',
                    'nom',
                    'prenom',
                    'roles',
                    'password',
                ],
                'length' => [
                    2 => 180,
                    100,
                    100,
                ],
                'unique' => [
                    2 => true,
                ],
            ],
        ],
        $o[0],
        []
    );
},
6 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\AnimalFeeding',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AnimalFeedingRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'animal_feeding',
                    ],
                ],
                'idGenerator' => [
                    $o[2],
                ],
                'name' => [
                    'App\\Entity\\AnimalFeeding',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                ],
                'columnName' => [
                    1 => 'id',
                ],
            ],
        ],
        $o[0],
        []
    );
},
7 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Schedule',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ScheduleRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'event' => $o[2],
                        'date' => $o[3],
                        'description' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'event' => 'event',
                        'date' => 'date',
                        'description' => 'description',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'event' => 'event',
                        'date' => 'date',
                        'description' => 'description',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'schedule',
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\Schedule',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'datetime',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'event',
                    'date',
                    'description',
                ],
                'columnName' => [
                    1 => 'id',
                    'event',
                    'date',
                    'description',
                ],
                'length' => [
                    2 => 255,
                    4 => 255,
                ],
                'nullable' => [
                    4 => true,
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
